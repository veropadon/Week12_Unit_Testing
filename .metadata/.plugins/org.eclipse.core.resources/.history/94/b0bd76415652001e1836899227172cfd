import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.spy;

import java.util.stream.Stream;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

class TestDemoTest {

	@BeforeEach
	public void setUp() {
		
		
		testDemo = new testDemo();
		
	}

	@ParameterizedTest
	@MethodSource("TestDemoTest#argumentsForAddPositive")
	
	public void assertThatTwoPositiveNumbersAreAddedCorrectly(int a , int b, int expected, Boolean expectException) {
		
		
	if(!expectException) {
		assertThat(testDemo.addPositive(a,b)).isEqualTo(expected);
		
	
		
		
	} else {
		assertThatThrownBy(() -> testDemo.addPositive(a,b))
		.isInstanceOf(IllegalArgumentException.class);
	
	
	}
	}

	
	static Stream<Arguments> argumentsForAddPositive() {
		return Stream.of(
				Arguments.arguments(2, 4, 6, false),
	            Arguments.arguments(-2, 4, 0, true),  // Exception expected
	            Arguments.arguments(2, -4, 0, true),  // Exception expected
	            Arguments.arguments(0, 4, 0, true)    // Exception expected
				);
	}
 
	@Test
	void assertThatNumberSquaredIsCorrect() {
	    // Step b: Create a spy on the real object.
	    testDemo mockDemo = spy(testDemo);

	    // Step c: Stub the getRandomInt method to return 5.
	    doReturn(5).when(mockDemo).getRandomInt();

	    // Step d: Call the randomNumberSquared method.
	    int fiveSquared = mockDemo.randomNumberSquared();

	    // Step e: Assert that the result is 25 (since 5 squared is 25).
	    assertThat(fiveSquared).isEqualTo(25);
	}

}

